using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProblemLogic
{
    class ProblemsElevenToTwenty
    {
        #region Eleven (not done)

        #endregion

        #region Twelve
        //The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        //1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        //Let us list the factors of the first seven triangle numbers:

        // 1: 1
        // 3: 1,3
        // 6: 1,2,3,6
        //10: 1,2,5,10
        //15: 1,3,5,15
        //21: 1,3,7,21
        //28: 1,2,4,7,14,28
        //We can see that 28 is the first triangle number to have over five divisors.

        //What is the value of the first triangle number to have over five hundred divisors?

        public static void HighlyDivisibleTriangularNumber()
        {
            long a = 0;
            long i = 1;


            while (i < Int64.MaxValue)
            {
                long numberOfDivisors = 0;
                a += i;
                int b = (int)(Math.Sqrt(a));
                for (long j = 1; j <= b; j++)
                {
                    if (a % j == 0) numberOfDivisors += 2;
                }
                if (numberOfDivisors > 500)
                {
                    Console.WriteLine(a);
                    break;
                }
                i++;
            }
        }
        #endregion

        #region Thirteen (not done)

        #endregion

        #region Fourteen
        //The following iterative sequence is defined for the set of positive integers:

        //n → n/2 (n is even)
        //n → 3n + 1 (n is odd)

        //Using the rule above and starting with 13, we generate the following sequence:

        //13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
        //It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

        //Which starting number, under one million, produces the longest chain?

        //NOTE: Once the chain starts the terms are allowed to go above one million.

        public static void LongestCollatzSequence()
        {
            long maxCount = 0;
            long maxStartNumber = 0;

            for (int i = 2; i < 1000000; i++)
            {
                long count = 0;
                long n = i;
                long startNumber = i;

                while (n != 1)
                {
                    if (n % 2 == 0) n = n / 2;
                    else if (n % 2 != 0) n = (3 * n) + 1;
                    count++;
                }

                if (count > maxCount)
                {
                    maxCount = count;
                    maxStartNumber = startNumber;
                }
            }
            Console.WriteLine(maxStartNumber + " " + maxCount);
        }
        #endregion
    }
}
