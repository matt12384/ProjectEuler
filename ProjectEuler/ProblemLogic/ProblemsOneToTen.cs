using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProblemLogic
{
    public class ProblemsOneToTen
    {
        public static bool IsPrime(long number)
        {
            if (number == 1) return false;
            if (number == 2) return true;

            var sqrtOfNumberBeingChecked = (long)Math.Floor(Math.Sqrt(number));
            for (long b = 2; b <= sqrtOfNumberBeingChecked; b++)
            {
                if (number % b == 0) return false;
            }
            return true;
        }
        //
        #region One
        //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

        //Find the sum of all the multiples of 3 or 5 below 1000.

        public static long SumOfMultiplesOf3And5BelowArgument(int belowThisNumber)
        {
            long a = 0;
            for (long i = 0; i < belowThisNumber; i++)
            {
                if (i % 3 == 0 || i % 5 == 0) a += i;
            }
            return a;
        }
        #endregion//
        //
        #region Two
        //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

        public static int GetSumOfEvenFibonacciNumbersBelowGivenArgument(int maximumFibonacciNumber)
        {
            int a = 0;
            int b = 1;
            int sumofEvenFibonacciNumbers = 0;

            while (a < maximumFibonacciNumber)
            {
                int temp = a;
                a = b;
                b = temp + b;

                if (a % 2 == 0) sumofEvenFibonacciNumbers += a;
            }
            return sumofEvenFibonacciNumbers;
        }
        #endregion
        //
        #region Three
        //The prime factors of 13195 are 5, 7, 13 and 29.

        //What is the largest prime factor of the number 600851475143 ?

        public static long LargestPrimeFactor(long number)
        {
            long maximumPrimeFactor = 0;

            var sqrtOfNumberBeingChecked = (long)Math.Floor(Math.Sqrt(number));

            for (long i = 1; i < sqrtOfNumberBeingChecked; i++)
            {
                if (number % i == 0 && IsPrime(i))
                {
                    if (i > maximumPrimeFactor) maximumPrimeFactor = i;
                }
            }
            return maximumPrimeFactor;
        }
        #endregion

        #region Four
        //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

        //Find the largest palindrome made from the product of two 3-digit numbers.


        public static void LargestPalindromeProduct()
        {
            List<int> list = new List<int>();
            for (int i = 100; i < 999; i++)
            {
                for (int j = 100; j < 999; j++)
                {
                    int x = i * j;
                    int x2 = x;
                    int x3 = x;
                    char[] charArray = x.ToString().ToArray();
                    char[] charArray2 = x2.ToString().Reverse().ToArray();
                    string a = new string(charArray);
                    string b = new string(charArray2);
                    if (a == b)
                    {
                        list.Add(x3);
                    }
                }
            }
            int h = list.Max();
            Console.WriteLine(h);
        }
        #endregion

        #region Five
        //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

        //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

        public static void SmallestMultiple()
        {
            for (int i = 1; i < 1000000000; i++)
            {
                if (i % 20 == 0 && i % 19 == 0 && i % 18 == 0 && i % 17 == 0 && i % 16 == 0 && i % 15 == 0 && i % 14 == 0 && i % 13 == 0 && i % 11 == 0)
                {
                    Console.WriteLine(i);
                    break;
                }
            }
        }
        #endregion

        #region Six
        //The sum of the squares of the first ten natural numbers is,

        //1^2 + 2^2 + ... + 10^2 = 385
        //The square of the sum of the first ten natural numbers is,

        //(1 + 2 + ... + 10)^2 = 552 = 3025
        //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

        public static double SumOfSquares()
        {
            List<double> listOfSquares = new List<double>();

            for (double i = 0; i <= 100; i++)
            {
                double squaredValues = Math.Pow(i, 2);
                listOfSquares.Add(squaredValues);
            }

            double sumOfSquaredValues = listOfSquares.Sum();
            return sumOfSquaredValues;
        }

        public static double SquareOfSums()
        {
            List<double> listOfValuesTo100 = new List<double>();

            for (double i = 0; i <= 100; i++)
            {
                listOfValuesTo100.Add(i);
            }

            double sumOfValues = listOfValuesTo100.Sum();
            double squareOfSum = Math.Pow(sumOfValues, 2);
            return squareOfSum;
        }

        public static double SumSquareDifference()
        {
            double x = SquareOfSums() - SumOfSquares();
            Console.WriteLine(x);
            return x;
        }
        #endregion

        #region Seven
        //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

        //What is the 10 001st prime number?
        public static void GetPrimeByIndex(long indexOfPrimeWanted)
        {
            long index = 1;
            long j = 1;
            while (index <= indexOfPrimeWanted)
            {
                if (IsPrime(j))
                {
                    if (index == indexOfPrimeWanted) Console.WriteLine(j);
                    index++;
                }
                j++;
            }
        }
        #endregion

        #region Eight
        //The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

        //73167176531330624919225119674426574742355349194934
        //96983520312774506326239578318016984801869478851843
        //85861560789112949495459501737958331952853208805511
        //12540698747158523863050715693290963295227443043557
        //66896648950445244523161731856403098711121722383113
        //62229893423380308135336276614282806444486645238749
        //30358907296290491560440772390713810515859307960866
        //70172427121883998797908792274921901699720888093776
        //65727333001053367881220235421809751254540594752243
        //52584907711670556013604839586446706324415722155397
        //53697817977846174064955149290862569321978468622482
        //83972241375657056057490261407972968652414535100474
        //82166370484403199890008895243450658541227588666881
        //16427171479924442928230863465674813919123162824586
        //17866458359124566529476545682848912883142607690042
        //24219022671055626321111109370544217506941658960408
        //07198403850962455444362981230987879927244284909188
        //84580156166097919133875499200524063689912560717606
        //05886116467109405077541002256983155200055935729725
        //71636269561882670428252483600823257530420752963450

        //Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.What is the value of this product?

        public static void GetLargestProduct()
        {
            string number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

            char[] charArray = number.ToArray();
            int n = 0;

            List<long> list = new List<long>();

            while (n < 988)
            {
                long a = 1;
                for (int i = n; i <= n + 12; i++)
                {
                    long b = Convert.ToInt64(charArray[i].ToString());
                    long temp = a;
                    b *= temp;
                    a = b;

                    if (i == n + 12)
                    {
                        list.Add(b);
                    }
                }
                n++;
            }
            Console.WriteLine(list.Max());
        }
        #endregion

        #region Nine (not done)

        #endregion
        //
        #region Ten

        //The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

        //Find the sum of all the primes below two million.

        public static long SumOfPrimesBelowValueProvided(int maxValue)
        {
            long a = 1;
            long sumofPrimes = 0;

            while (a <= maxValue)
            {
                if (IsPrime(a)) sumofPrimes += a;
                a++;
            }
            return sumofPrimes;
        }
        #endregion
    }
}
